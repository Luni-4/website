<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on rav1e</title>
    <link>https://mindfreeze.videolan.me/rav1e/docs/</link>
    <description>Recent content in Docs on rav1e</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://mindfreeze.videolan.me/rav1e/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What is rav1e?</title>
      <link>https://mindfreeze.videolan.me/rav1e/docs/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mindfreeze.videolan.me/rav1e/docs/overview/</guid>
      <description>rav1e is an experimental AV1 video encoder. It is designed to eventually cover all use cases, though in its current form it is most suitable for cases where libaom (the reference encoder) is too slow.
Features  Intra and inter frames 64x64 superblocks 4x4 to 64x64 RDO-selected square and 2:1&amp;frasl;1:2 rectangular blocks DC, H, V, Paeth, smooth, and a subset of directional prediction modes DCT, ADST and identity transforms (up to 64x64, 16x16 and 32x32 respectively) 8-, 10- and 12-bit depth color 4:2:0 (full support), 4:2:2 and 4:4:4 (limited) chroma sampling Variable speed settings Near real-time encoding at high speed levels  Releases For the foreseeable future, a weekly pre-release of rav1e will be published every Tuesday.</description>
    </item>
    
    <item>
      <title>Coding Style</title>
      <link>https://mindfreeze.videolan.me/rav1e/docs/getting-started/coding-style/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mindfreeze.videolan.me/rav1e/docs/getting-started/coding-style/</guid>
      <description>The coding style for rav1e code follows the Rust Style Guide, with the following exceptions:
 Each indentation level is 2 spaces.  Assertions Assertions should never be reachable by any sequence of API calls.
Assertions should never be reachable by any sequence of crav1e API calls which do not depend on C undefined behavior, or contain pointers that cause invalid behavior when accessed.
Prefer assert()! to debug_assert()! in the following situations: - Unsafe code.</description>
    </item>
    
    <item>
      <title>Profiling rav1e</title>
      <link>https://mindfreeze.videolan.me/rav1e/docs/getting-started/profiling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mindfreeze.videolan.me/rav1e/docs/getting-started/profiling/</guid>
      <description>Cargo integrations There are multiple integrations with cargo that simplify your life a lot .
Flamegraph flamegraph works in any platform that has dtrace or perf support.
$ cargo install flamegraph $ cargo flamegraph -o flame.svg -b rav1e -- ~/sample.y4m -o /dev/null $ $browser flame.svg   NOTE Make sure the browser lets you use the built-in interactivity in the svg.
 Instruments cargo-instruments is macOS-only and integrates neatly with the XCode UI.</description>
    </item>
    
    <item>
      <title>Versioning</title>
      <link>https://mindfreeze.videolan.me/rav1e/docs/getting-started/versioning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mindfreeze.videolan.me/rav1e/docs/getting-started/versioning/</guid>
      <description>rav1e follows Cargo&amp;rsquo;s versioning scheme: https://doc.rust-lang.org/cargo/reference/manifest.html#the-version-field
Because rav1e is not yet at version 1.0.0, all changes that break the API require a minor-version bump.
The API is defined as: - public functions in src/api.rs - command line parameters to the rav1e binary</description>
    </item>
    
    <item>
      <title>Glossary</title>
      <link>https://mindfreeze.videolan.me/rav1e/docs/getting-started/glossary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mindfreeze.videolan.me/rav1e/docs/getting-started/glossary/</guid>
      <description>Temporal Unit The same as an AV1 temporal unit. In rav1e, a Temporal Unit always starts with a temporal delimiter, followed by zero or one sequence headers, one or more frame headers and zero or more tile groups.
Tile Group Same as an AV1 tile group. Zero or more of these, plus a Frame Header, make up a Frame.
Frame Header Same as an AV1 frame header. These are followed by a tile group, except when the show-existing-frame feature is used, in which case there are zero tile groups.</description>
    </item>
    
  </channel>
</rss>